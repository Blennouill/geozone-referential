// <auto-generated />
using System;
using GeoZoneReferential.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeoZoneReferential.Infrastructure.Migrations
{
    [DbContext(typeof(GeoZoneReferentialContext))]
    [Migration("20180701142206_Countries_Feed")]
    partial class Countries_Feed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.AdministrativeLevelZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId");

                    b.Property<byte>("Level");

                    b.Property<string>("Wording");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AdministrativeLevelZones");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.AdministrativeZone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministrativeLevelZoneId");

                    b.Property<string>("ISO3166A2Code")
                        .IsRequired();

                    b.Property<string>("ISO3166A2ParentCode");

                    b.Property<string>("Wording")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeLevelZoneId");

                    b.ToTable("AdministrativeZones");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AdministrativeZoneId");

                    b.Property<string>("ComplementaryWording");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("LastReliabilitingDate");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Wording")
                        .IsRequired();

                    b.Property<string>("WordingS42Standard");

                    b.HasKey("Id");

                    b.HasIndex("AdministrativeZoneId")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.HasIndex("WordingS42Standard")
                        .IsUnique()
                        .HasFilter("[WordingS42Standard] IS NOT NULL");

                    b.HasIndex("WordingS42Standard", "PostalCode")
                        .IsUnique()
                        .HasFilter("[WordingS42Standard] IS NOT NULL AND [PostalCode] IS NOT NULL");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryOwnerId");

                    b.Property<string>("ISO3166A2Code")
                        .IsRequired();

                    b.Property<string>("Wording")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CountryOwnerId")
                        .IsUnique()
                        .HasFilter("[CountryOwnerId] IS NOT NULL");

                    b.HasIndex("ISO3166A2Code")
                        .IsUnique();

                    b.HasIndex("Wording")
                        .IsUnique();

                    b.HasIndex("ISO3166A2Code", "Wording")
                        .IsUnique();

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.AdministrativeLevelZone", b =>
                {
                    b.HasOne("GeoZoneReferential.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.AdministrativeZone", b =>
                {
                    b.HasOne("GeoZoneReferential.Domain.Entities.AdministrativeLevelZone", "AdministrativeLevelZone")
                        .WithMany()
                        .HasForeignKey("AdministrativeLevelZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.City", b =>
                {
                    b.HasOne("GeoZoneReferential.Domain.Entities.AdministrativeZone", "AdministrativeZone")
                        .WithOne()
                        .HasForeignKey("GeoZoneReferential.Domain.Entities.City", "AdministrativeZoneId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeoZoneReferential.Domain.Entities.Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.Country", b =>
                {
                    b.HasOne("GeoZoneReferential.Domain.Entities.Country", "CountryOwner")
                        .WithOne()
                        .HasForeignKey("GeoZoneReferential.Domain.Entities.Country", "CountryOwnerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
