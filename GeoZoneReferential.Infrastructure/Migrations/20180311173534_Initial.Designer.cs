// <auto-generated />
using GeoZoneReferential.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace GeoZoneReferential.Infrastructure.Migrations
{
    [DbContext(typeof(GeoZoneReferentialContext))]
    [Migration("20180311173534_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComplementaryWording");

                    b.Property<string>("PostalCode");

                    b.Property<string>("Wording");

                    b.Property<string>("WordingS42Standard");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryOwnerId");

                    b.Property<string>("ISO3166A2Code");

                    b.Property<string>("Wording");

                    b.HasKey("Id");

                    b.HasIndex("CountryOwnerId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("GeoZoneReferential.Domain.Entities.Country", b =>
                {
                    b.HasOne("GeoZoneReferential.Domain.Entities.Country", "CountryOwner")
                        .WithMany()
                        .HasForeignKey("CountryOwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
